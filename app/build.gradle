apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

/**
 * :app
 *
 * The main Android application module.
 *
 * The design here is such that the app module can implement the :repo module,
 * and still access the exposed classes in the :core module, without importing them directly.
 *
 * This gives our database and web service separation from the UI layer,
 * preventing breakage of features caused by accidentally exposing classes and methods.
 */
android {
    compileSdkVersion compile_sdk_version

    defaultConfig {
        applicationId "tech.muso.demo.architecture"
        minSdkVersion min_sdk_version
        targetSdkVersion compile_sdk_version
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
//        viewBinding = true // viewBinding is preferred over findViewById<View>()
        dataBinding = true // dataBinding for LiveData connection to ViewModel
    }

    // needed for kotlin extension libraries, which are compiled against java 1.8
    compileOptions {
        sourceCompatibility = java_version
        targetCompatibility = java_version
    }

    kotlinOptions {
        jvmTarget = java_version
    }

    // dynamic features allows for modular components to be delivered on demand as needed
    //  - this increases build speed & reduces that tests that need to during continuous integration
    // additionally, the separation of concerns allows for ease in scaling development
    //  since it allows for individual developers or groups to have "areas of expertise"
//    dynamicFeatures = [':theme']

    // things like restricted features make sense to have as "on demand delivery" modules
    // e.g. if options trading was added, but only 5% of the users would use it;
    //   then it does not make sense to have downloaded all the time.
}

dependencies {
    // NOTE: this line is included by AndroidStudio by default to obtain local JAR libs,
    //   but I would NEVER recommend using included jar/aar files.
    //
    // These should be hosted by a locally hosted binary manager like JFrog's Artifactory or ProGet.
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation project(":repos")
    implementation project(":theme")
    kapt librariesKapt

    implementation libraries

    testImplementation testLibraries
    androidTestImplementation androidTestLibraries
}